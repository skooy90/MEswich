<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt" %>

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>MES ÎåÄÏãúÎ≥¥Îìú</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/resources/css/dashboard.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <!-- Ìó§Îçî Ìè¨Ìï® -->
    <jsp:include page="../basic/header.jsp" />
    
    <!-- ÏÇ¨Ïù¥ÎìúÎ∞î Ìè¨Ìï® -->
    <jsp:include page="../basic/sidebar.jsp" />
    
    <!-- ÎåÄÏãúÎ≥¥Îìú Î©îÏù∏ ÏΩòÌÖêÏ∏† -->
    <div class="dashboard-container">
        <div class="dashboard-header">
            <h1>MES ÎåÄÏãúÎ≥¥Îìú</h1>
            <p>ÏÉùÏÇ∞ ÌòÑÌô© Î™®ÎãàÌÑ∞ÎßÅ</p>
        </div>
        
        <!-- 6Í∞ú ÏúÑÏ†Ø Í∑∏Î¶¨Îìú -->
        <div class="widget-grid">
            
            <!-- 1Î≤à ÏúÑÏ†Ø: Ï†ÑÏ≤¥ ÏÉùÏÇ∞Îüâ (Ìï≠Î™© ÏÑ†ÌÉù Í∏∞Îä• Ï∂îÍ∞Ä) -->
            <div class="widget-card production-widget">
                <div class="widget-header">
                    <h3>Ï†ÑÏ≤¥ ÏÉùÏÇ∞Îüâ</h3>
                    <div class="widget-icon">üìä</div>
                </div>
                <div class="widget-content">
                    
                    <!-- ÏÉùÏÇ∞ Ìï≠Î™© ÏÑ†ÌÉù -->
                    <div class="production-selector">
                        <label for="productionSelect">ÏÉùÏÇ∞ Ìï≠Î™© ÏÑ†ÌÉù:</label>
                        <select id="productionSelect" onchange="loadProductionDetail()">
                            <option value="">Ï†ÑÏ≤¥ ÏÉùÏÇ∞Îüâ Î≥¥Í∏∞</option>
                            <c:forEach var="production" items="${allProductions}">
                                <option value="${production.lotNumber}" 
                                        ${selectedLot == production.lotNumber ? 'selected' : ''}>
                                    ${production.lotNumber} - ${production.productName}
                                </option>
                            </c:forEach>
                        </select>
                        </div>
                        
                    <!-- ÏÑ†ÌÉùÎêú Ìï≠Î™© ÏÉÅÏÑ∏ Ï†ïÎ≥¥ (Ìï≠ÏÉÅ ÌëúÏãú) -->
                    <div class="selected-production-info" id="selected-production-card">
                        <h4>ÏÑ†ÌÉùÎêú ÏÉùÏÇ∞ Ìï≠Î™© Ï†ïÎ≥¥</h4>
                        <div class="production-details">
                            <div class="detail-row">
                                <span class="detail-label">LOT Î≤àÌò∏:</span>
                                <span class="detail-value" id="selected-lot-number">
                                    <c:choose>
                                        <c:when test="${not empty selectedProduction}">${selectedProduction.lotNumber}</c:when>
                                        <c:otherwise>Ìï≠Î™©ÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</c:otherwise>
                                    </c:choose>
                                </span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Ï†úÌíàÎ™Ö:</span>
                                <span class="detail-value" id="selected-product-name">
                                    <c:choose>
                                        <c:when test="${not empty selectedProduction}">${selectedProduction.productName}</c:when>
                                        <c:otherwise>-</c:otherwise>
                                    </c:choose>
                                </span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Í≥ÑÌöç ÏàòÎüâ:</span>
                                <span class="detail-value" id="selected-planned-qty">
                                    <c:choose>
                                        <c:when test="${not empty selectedProduction}">
                                            <fmt:formatNumber value="${selectedProduction.plannedQty}" pattern="#,###" />Í∞ú
                                        </c:when>
                                        <c:otherwise>-</c:otherwise>
                                    </c:choose>
                                </span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Ïã§Ï†ú ÏàòÎüâ:</span>
                                <span class="detail-value" id="selected-actual-qty">
                                    <c:choose>
                                        <c:when test="${not empty selectedProduction}">
                                            <fmt:formatNumber value="${selectedProduction.actualQty}" pattern="#,###" />Í∞ú
                                        </c:when>
                                        <c:otherwise>-</c:otherwise>
                                    </c:choose>
                                </span>
                                </div>
                            <div class="detail-row">
                                <span class="detail-label">ÏÉÅÌÉú:</span>
                                <span class="detail-value" id="selected-status">
                                    <c:choose>
                                        <c:when test="${not empty selectedProduction}">
                                            <span class="status-${selectedProduction.status.toLowerCase()}">${selectedProduction.status}</span>
                                        </c:when>
                                        <c:otherwise>-</c:otherwise>
                                    </c:choose>
                                </span>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Ï†ÑÏ≤¥ ÏÉùÏÇ∞Îüâ ÌÜµÍ≥Ñ (Ìï≠Î™©Ïù¥ ÏÑ†ÌÉùÎêòÏßÄ ÏïäÏïòÏùÑ ÎïåÎßå ÌëúÏãú) -->
                    <!-- ÏÉùÏÇ∞Îüâ ÎπÑÍµê Ï∞®Ìä∏ -->
                    <div class="chart-container">
                        <canvas id="productionChart"></canvas>
                    </div>
                </div>
            </div>
            
            <!-- 2Î≤à ÏúÑÏ†Ø: ÏûëÏóÖÌòÑÌô© -->
            <div class="widget-card work-status-widget">
                <div class="widget-header">
                    <h3>ÏûëÏóÖÌòÑÌô©</h3>
                    <div class="widget-icon">üìä</div>
                </div>
                <div class="widget-content">
                    <!-- Ï¥ù ÏûëÏóÖ ÌòÑÌô© Ïπ¥Îìú -->
                    <div class="work-summary">
                        <div class="work-total">
                            <span class="work-number">${workStatusStats.totalWorks}</span>
                            <span class="work-unit">Í∞ú</span>
                        </div>
                        <div class="work-label">Ï¥ù ÏûëÏóÖ Ïàò</div>
                    </div>
                    
                    <!-- ÏûëÏóÖ ÏÉÅÌÉúÎ≥Ñ ÎèÑÎÑõ Ï∞®Ìä∏ -->
                    <div class="work-chart-container">
                        <canvas id="workStatusChart"></canvas>
                    </div>
                    
                    <!-- ÏôÑÏ†úÌíàÎ≥Ñ ÌòÑÌô© ÌÖåÏù¥Î∏î -->
                    <div class="product-status-table">
                        <c:if test="${not empty workStatusStats.productList}">
                            <c:forEach var="product" items="${workStatusStats.productList}">
                                <div class="product-row">
                                    <div class="product-info">
                                        <span class="product-name">${product.productName}</span>
                                        <span class="product-qty">Í≥ÑÌöç: ${product.plannedQty} | Ïã§Ï†ú: ${product.actualQty}</span>
                                    </div>
                                    <div class="product-rate">${product.completionRate}%</div>
                                </div>
                            </c:forEach>
                        </c:if>
                    </div>
                </div>
            </div>
            
            
            <!-- 3Î≤à ÏúÑÏ†Ø: Î∂àÎüâ ÏõêÏù∏Î≥Ñ ÌöüÏàò -->
            <div class="widget-card defect-cause-widget">
                <div class="widget-header">
                    <h3>Î∂àÎüâ ÏõêÏù∏Î≥Ñ ÌöüÏàò</h3>
                    <div class="widget-icon">üîç</div>
                </div>
                <div class="widget-content">
                    <!-- Ï¥ù Î∂àÎüâ Í∞ØÏàò ÌëúÏãú -->
                    <div class="defect-cause-summary">
                        <div class="defect-cause-total">
                            <span class="defect-cause-number" id="total-defect-causes">${defectCauseStats.totalDefects}</span>
                            <span class="defect-cause-unit">Ìöå</span>
                        </div>
                        <div class="defect-cause-label">Ï¥ù Î∂àÎüâ ÌöüÏàò</div>
                    </div>
                    
                    <!-- Î∂àÎüâ ÏõêÏù∏Î≥Ñ ÎèÑÎÑõ Ï∞®Ìä∏ -->
                    <div class="defect-cause-chart-container">
                        <canvas id="defectCauseChart"></canvas>
                    </div>
                    
                    <!-- Î∂àÎüâ ÏõêÏù∏Î≥Ñ Î≤îÎ°Ä -->
                    <div class="defect-cause-legend" id="defect-cause-legend">
                        <c:if test="${not empty defectCauseStats.causeList}">
                            <c:forEach var="cause" items="${defectCauseStats.causeList}" varStatus="status">
                                <div class="legend-item">
                                    <div class="legend-color" style="background-color: <c:choose><c:when test="${status.index == 0}">#e74c3c</c:when><c:when test="${status.index == 1}">#f39c12</c:when><c:otherwise>#3498db</c:otherwise></c:choose>"></div>
                                    <div class="legend-text">
                                        <span class="legend-name">${cause.causeName}</span>
                                        <span class="legend-count">${cause.defectCount}Ìöå (${cause.percentage}%)</span>
                                    </div>
                                </div>
                            </c:forEach>
                        </c:if>
                    </div>
                </div>
            </div>
            
            <!-- 4Î≤à ÏúÑÏ†Ø: ÎÇ†ÏßúÎ≥Ñ Î∂àÎüâ Í∞ØÏàò ÌòÑÌô© -->
            <div class="widget-card defect-stats-widget">
                <div class="widget-header">
                    <h3>ÎÇ†ÏßúÎ≥Ñ Î∂àÎüâ Í∞ØÏàò ÌòÑÌô©</h3>
                    <div class="widget-icon">üìä</div>
                </div>
                <div class="widget-content">
                    <!-- Ï¥ù Î∂àÎüâ Í∞ØÏàò ÌëúÏãú -->
                    <div class="defect-summary">
                        <div class="defect-total">
                            <span class="defect-number" id="total-defects">${defectStats.totalDefects}</span>
                            <span class="defect-unit">Í∞ú</span>
                        </div>
                        <div class="defect-label">Ï¥ù Î∂àÎüâ Í∞ØÏàò</div>
                    </div>
                    
                    <!-- ÎÇ†ÏßúÎ≥Ñ Î∂àÎüâ Í∞ØÏàò Ï∞®Ìä∏ -->
                    <div class="defect-chart-container">
                        <canvas id="defectChart"></canvas>
                    </div>
                </div>
            </div>
            <!-- 5Î≤à ÏúÑÏ†Ø: LOT Ï∂îÏ†Å -->
            <div class="widget-card lot-tracking-widget">
                <div class="widget-header">
                    <h3>LOT Ï∂îÏ†Å</h3>
                    <div class="widget-icon">üîç</div>
                </div>
                <div class="widget-content">
                    <!-- LOT Í≤ÄÏÉâ ÏûÖÎ†•Ï∞Ω -->
                    <div class="lot-search-container">
                        <input type="text" id="lotSearchInput" placeholder="LOT Î≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî" />
                        <button onclick="searchLot()">Í≤ÄÏÉâ</button>
                    </div>
                    
                    <!-- Í≤ÄÏÉâ Í≤∞Í≥º ÏòÅÏó≠ -->
                    <div id="lotTrackingResult" class="lot-tracking-result">
                        <div class="no-search">
                            <p>LOT Î≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏó¨ Ï∂îÏ†Å Ï†ïÎ≥¥Î•º ÌôïÏù∏ÌïòÏÑ∏Ïöî</p>
                        </div>
                    </div>
                </div>
            </div>
            
<!-- 6Î≤à ÏúÑÏ†Ø: Chatbot -->
<div class="widget-card chatbot-widget">
    <div class="widget-header">
        <h3>MEswich AI Ï±óÎ¥á</h3>
        <div class="widget-icon">ü§ñ</div>
    </div>
    <div class="widget-content chatbot-container">
        <div class="chatbot-box">
            <textarea id="chatbot-question" rows="3" cols="50" placeholder="ÏßàÎ¨∏ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî" style="width:100%; resize:none;"></textarea><br>
            <button onclick="sendChatbotQuestion()" class="chatbot-btn">ÏßàÎ¨∏ÌïòÍ∏∞</button>

            <h4>ÏùëÎãµ:</h4>
            <div id="chatbot-response" style="white-space: pre-wrap; background:#f9f9f9; border:1px solid #ddd; border-radius:6px; padding:10px; min-height:60px;"></div>
        </div>
    </div>
</div>
            
        </div>
    </div>
    
    
    <script>
        // ÏÉùÏÇ∞ Ìï≠Î™© ÏÑ†ÌÉù Ïãú ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Î°úÎìú
        function loadProductionDetail() {
            const selectedLot = document.getElementById('productionSelect').value;
            if (selectedLot) {
                // ÏÑ†ÌÉùÎêú Ìï≠Î™©Ïùò ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º AJAXÎ°ú Î°úÎìú
                fetch('/mes/dashboard/api/production-detail?lotNumber=' + encodeURIComponent(selectedLot))
                    .then(response => response.json())
                    .then(data => {
                        console.log('Î∞õÏùÄ Îç∞Ïù¥ÌÑ∞:', data); // ÎîîÎ≤ÑÍπÖÏö©
                        updateProductionDetail(data);
                        updateChart(data);
                    })
                    .catch(error => {
                        console.error('ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Î°úÎìú Ï§ë Ïò§Î•ò:', error);
                        alert('Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
                    });
            } else {
                // Ï†ÑÏ≤¥ ÏÉùÏÇ∞Îüâ Î≥¥Í∏∞Î°ú ÎèåÏïÑÍ∞ÄÍ∏∞ - Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ Ïπ¥ÎìúÎì§ Îã§Ïãú Î≥¥Ïù¥Í∏∞
                const overallStatsCards = document.getElementById('overall-stats-cards');
                if (overallStatsCards) {
                    overallStatsCards.style.display = 'grid';
                }
                
                // ÏÑ†ÌÉùÎêú Ìï≠Î™© Ï†ïÎ≥¥ Ï¥àÍ∏∞Ìôî
                const lotNumberElement = document.getElementById('selected-lot-number');
                const productNameElement = document.getElementById('selected-product-name');
                const plannedQtyElement = document.getElementById('selected-planned-qty');
                const actualQtyElement = document.getElementById('selected-actual-qty');
                const statusElement = document.getElementById('selected-status');
                
                if (lotNumberElement) lotNumberElement.textContent = 'Ìï≠Î™©ÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî';
                if (productNameElement) productNameElement.textContent = '-';
                if (plannedQtyElement) plannedQtyElement.textContent = '-';
                if (actualQtyElement) actualQtyElement.textContent = '-';
                if (statusElement) statusElement.innerHTML = '-';
                
                // Ï∞®Ìä∏ÎèÑ Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞Î°ú ÏóÖÎç∞Ïù¥Ìä∏
                updateChart(null);
            }
        }
        
        // ÏÑ†ÌÉùÎêú ÏÉùÏÇ∞ Ìï≠Î™© ÏÉÅÏÑ∏ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏ (Í∏∞Ï°¥ Ïπ¥ÎìúÏùò Í∞íÎßå Î≥ÄÍ≤Ω)
        function updateProductionDetail(data) {
            if (!data) {
                console.error('Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.');
                return;
            }
            
            // IDÎ°ú ÏöîÏÜåÎ•º Ï∞æÏïÑÏÑú Í∞íÎßå ÏóÖÎç∞Ïù¥Ìä∏ (ÏÉàÎ°úÏö¥ HTML ÏÉùÏÑ±ÌïòÏßÄ ÏïäÏùå)
            const lotNumberElement = document.getElementById('selected-lot-number');
            const productNameElement = document.getElementById('selected-product-name');
            const plannedQtyElement = document.getElementById('selected-planned-qty');
            const actualQtyElement = document.getElementById('selected-actual-qty');
            const statusElement = document.getElementById('selected-status');
            
            if (lotNumberElement) lotNumberElement.textContent = data.lotNumber || 'N/A';
            if (productNameElement) productNameElement.textContent = data.productName || 'N/A';
            if (plannedQtyElement) plannedQtyElement.textContent = (data.plannedQty || 0).toLocaleString() + 'Í∞ú';
            if (actualQtyElement) actualQtyElement.textContent = (data.actualQty || 0).toLocaleString() + 'Í∞ú';
            if (statusElement) {
                statusElement.innerHTML = '<span class="status-' + (data.status || '').toLowerCase() + '">' + (data.status || 'N/A') + '</span>';
            }
            
            // Ï†ÑÏ≤¥ ÏÉùÏÇ∞Îüâ ÌÜµÍ≥Ñ Ïπ¥ÎìúÎì§ Ïà®Í∏∞Í∏∞
            const overallStatsCards = document.getElementById('overall-stats-cards');
            if (overallStatsCards) {
                overallStatsCards.style.display = 'none';
            }
        }
        
        // Ï∞®Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
        function updateChart(data) {
            if (data && data.plannedQty !== undefined && data.actualQty !== undefined) {
                // ÏÑ†ÌÉùÎêú Ìï≠Î™©Ïùò Îç∞Ïù¥ÌÑ∞Î°ú Ï∞®Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
                productionChart.data.datasets[0].data = [data.plannedQty, data.actualQty];
                productionChart.data.labels = ['Í≥ÑÌöç ÏàòÎüâ', 'Ïã§Ï†ú ÏàòÎüâ'];
                productionChart.options.plugins.title.text = data.lotNumber + ' - ' + data.productName;
            } else {
                // Ï†ÑÏ≤¥ ÏÉùÏÇ∞Îüâ Îç∞Ïù¥ÌÑ∞Î°ú Ï∞®Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
                productionChart.data.datasets[0].data = [
                    ${productionStats.totalPlannedQty},
                    ${productionStats.totalActualQty}
                ];
                productionChart.data.labels = ['Ï¥ù Í≥ÑÌöç ÏàòÎüâ', 'Ï¥ù Ïã§Ï†ú ÏàòÎüâ'];
                productionChart.options.plugins.title.text = 'Ï†ÑÏ≤¥ ÏÉùÏÇ∞Îüâ ÎπÑÍµê';
            }
            productionChart.update();
        }
        
        // Ï¥àÍ∏∞ Ï∞®Ìä∏ ÏÉùÏÑ±
        const productionCtx = document.getElementById('productionChart').getContext('2d');
        const productionChart = new Chart(productionCtx, {
            type: 'bar',
            data: {
                labels: ['Í≥ÑÌöç ÏàòÎüâ', 'Ïã§Ï†ú ÏàòÎüâ'],
                datasets: [{
                    label: 'ÏÉùÏÇ∞Îüâ',
                    data: [
                        ${productionStats.totalPlannedQty},
                        ${productionStats.totalActualQty}
                    ],
                    backgroundColor: [
                        'rgba(54, 162, 235, 0.8)',
                        'rgba(75, 192, 192, 0.8)'
                    ],
                    borderColor: [
                        'rgba(54, 162, 235, 1)',
                        'rgba(75, 192, 192, 1)'
                    ],
                    borderWidth: 2
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Ï†ÑÏ≤¥ ÏÉùÏÇ∞Îüâ ÎπÑÍµê'
                    },
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return value.toLocaleString() + 'Í∞ú';
                            }
                        }
                    }
                }
            }
        });
        
//         // 30Ï¥àÎßàÎã§ 1Î≤à ÏúÑÏ†Ø Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®
//         setInterval(function() {
//             fetch('/mes/dashboard/api/production-stats')
//                 .then(response => response.json())
//                 .then(data => {
//                     // Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
//                     productionChart.data.datasets[0].data = [
//                         data.totalPlannedQty,
//                         data.totalActualQty
//                     ];
//                     productionChart.update();
//                 })
//                 .catch(error => {
//                     console.error('Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ® Ï§ë Ïò§Î•ò:', error);
//                 });
//         }, 30000);
        
        // 2Î≤à ÏúÑÏ†Ø: Î∂àÎüâ ÌÜµÍ≥Ñ Ï∞®Ìä∏ ÏÉùÏÑ±
        let defectChart = null;
        
        // Î∂àÎüâ ÌÜµÍ≥Ñ Ï∞®Ìä∏ ÏÉùÏÑ±
        function createDefectChart() {
            const ctx = document.getElementById('defectChart');
            if (!ctx) return;
            
            // ÏÑúÎ≤ÑÏÇ¨Ïù¥Îìú Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
            const dailyDefects = [
                <c:forEach var="daily" items="${defectStats.dailyDefects}" varStatus="status">
                {dateStr: '${daily.dateStr}', defectCount: ${daily.defectCount}}<c:if test="${!status.last}">,</c:if>
                </c:forEach>
            ];
            
            if (!dailyDefects || dailyDefects.length === 0) return;
            
            // Í∏∞Ï°¥ Ï∞®Ìä∏Í∞Ä ÏûàÏúºÎ©¥ Ï†úÍ±∞
            if (defectChart) {
                defectChart.destroy();
            }
            
            const labels = dailyDefects.map(item => item.dateStr);
            const defectCounts = dailyDefects.map(item => item.defectCount);
            
            defectChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Î∂àÎüâ Í∞ØÏàò',
                        data: defectCounts,
                        borderColor: '#e74c3c',
                        backgroundColor: 'rgba(231, 76, 60, 0.1)',
                        borderWidth: 2,
                        fill: true,
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: 'ÎÇ†ÏßúÎ≥Ñ Î∂àÎüâ Í∞ØÏàò Ï∂îÏù¥'
                        },
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return value.toLocaleString() + 'Í∞ú';
                                }
                            }
                        }
                    }
                }
            });
        }
        
        // ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ï∞®Ìä∏ ÏÉùÏÑ±
        document.addEventListener('DOMContentLoaded', function() {
            // ÏÑúÎ≤ÑÏÇ¨Ïù¥Îìú Îç∞Ïù¥ÌÑ∞Î°ú Ï∞®Ìä∏ ÏÉùÏÑ±
            createDefectChart();
            createDefectCauseChart();
            createWorkStatusChart();
            
            // ÏûëÏóÖÌòÑÌô© ÌïòÎã® ÌÖåÏù¥Î∏î ÌéòÏù¥Ïßï Ï¥àÍ∏∞Ìôî Ï∂îÍ∞Ä
            setTimeout(() => {
                initWorkStatusPagination();
            }, 100);
        });
        
        // 3Î≤à ÏúÑÏ†Ø: Î∂àÎüâ ÏõêÏù∏Î≥Ñ ÎèÑÎÑõ Ï∞®Ìä∏ ÏÉùÏÑ±
        let defectCauseChart = null;
        
        // Î∂àÎüâ ÏõêÏù∏Î≥Ñ ÎèÑÎÑõ Ï∞®Ìä∏ ÏÉùÏÑ±
        function createDefectCauseChart() {
            const ctx = document.getElementById('defectCauseChart');
            if (!ctx) return;
            
            // ÏÑúÎ≤ÑÏÇ¨Ïù¥Îìú Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
            const causeList = [
                <c:forEach var="cause" items="${defectCauseStats.causeList}" varStatus="status">
                {causeName: '${cause.causeName}', defectCount: ${cause.defectCount}, percentage: ${cause.percentage}}<c:if test="${!status.last}">,</c:if>
                </c:forEach>
            ];
            
            if (!causeList || causeList.length === 0) return;
            
            // Í∏∞Ï°¥ Ï∞®Ìä∏Í∞Ä ÏûàÏúºÎ©¥ Ï†úÍ±∞
            if (defectCauseChart) {
                defectCauseChart.destroy();
            }
            
            const labels = causeList.map(item => item.causeName);
            const defectCounts = causeList.map(item => item.defectCount);
            const percentages = causeList.map(item => item.percentage);
            
            // ÏÉâÏÉÅ Î∞∞Ïó¥ (3Í∞ÄÏßÄ ÏõêÏù∏Ïóê ÎßûÏ∂§)
            const colors = ['#e74c3c', '#f39c12', '#3498db'];
            const backgroundColors = colors.map(color => color + '80'); // Ìà¨Î™ÖÎèÑ Ï∂îÍ∞Ä
            
            defectCauseChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Î∂àÎüâ Í∞ØÏàò',
                        data: defectCounts,
                        backgroundColor: backgroundColors,
                        borderColor: colors,
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Î∂àÎüâ ÏõêÏù∏Î≥Ñ Î∂ÑÌè¨'
                        },
                        legend: {
                            display: false // Î≤îÎ°ÄÎäî Î≥ÑÎèÑÎ°ú ÌëúÏãú
                        }
                    },
                    cutout: '60%' // ÎèÑÎÑõ Ï∞®Ìä∏Ïùò ÎÇ¥Î∂Ä Íµ¨Î©ç ÌÅ¨Í∏∞
                }
            });
            
        }
        
        // 4Î≤à ÏúÑÏ†Ø: ÏûëÏóÖÌòÑÌô© ÎèÑÎÑõ Ï∞®Ìä∏ ÏÉùÏÑ±
        let workStatusChart = null;
        
        // ÏûëÏóÖÌòÑÌô© ÎèÑÎÑõ Ï∞®Ìä∏ ÏÉùÏÑ±
        function createWorkStatusChart() {
            const ctx = document.getElementById('workStatusChart');
            if (!ctx) return;
            
            // ÏÑúÎ≤ÑÏÇ¨Ïù¥Îìú Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
            const statusList = [
            	<c:forEach var="workStatus" items="${workStatusStats.statusList}" varStatus="status">
                {status: '${workStatus.status}', workCount: ${workStatus.workCount}}<c:if test="${!status.last}">,</c:if>
            </c:forEach>
            ];
            
            if (!statusList || statusList.length === 0) return;
            
            // Í∏∞Ï°¥ Ï∞®Ìä∏Í∞Ä ÏûàÏúºÎ©¥ Ï†úÍ±∞
            if (workStatusChart) {
                workStatusChart.destroy();
            }
            
            const labels = statusList.map(item => item.status);
            const workCounts = statusList.map(item => item.workCount);
            
            // ÏÉâÏÉÅ Î∞∞Ïó¥ (ÏûëÏóÖ ÏÉÅÌÉúÎ≥Ñ)
            const colors = ['#3498db', '#f39c12', '#2ecc71', '#e74c3c'];
            const backgroundColors = colors.map(color => color + '80'); // Ìà¨Î™ÖÎèÑ Ï∂îÍ∞Ä
            
            workStatusChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'ÏûëÏóÖ Ïàò',
                        data: workCounts,
                        backgroundColor: backgroundColors,
                        borderColor: colors,
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: 'ÏûëÏóÖ ÏÉÅÌÉúÎ≥Ñ Î∂ÑÌè¨'
                        },
                        legend: {
                            display: true,
                            position: 'bottom'
                        }
                    },
                    cutout: '60%' // ÎèÑÎÑõ Ï∞®Ìä∏Ïùò ÎÇ¥Î∂Ä Íµ¨Î©ç ÌÅ¨Í∏∞
                }
            });
        }
        
        // LOT Í≤ÄÏÉâ Í∏∞Îä•
        function searchLot() {
            const lotNumber = document.getElementById('lotSearchInput').value;
            if (!lotNumber.trim()) {
                alert('LOT Î≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
                return;
            }
            
            fetch('/mes/dashboard/api/lot-tracking?lotNumber=' + encodeURIComponent(lotNumber))
                .then(response => response.json())
                .then(data => {
                    displayLotTrackingResult(data, lotNumber);
                })
                .catch(error => {
                    console.error('LOT Ï∂îÏ†Å Ï°∞Ìöå Ï§ë Ïò§Î•ò:', error);
                    alert('LOT Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
                });
        }
        
        // ÏÉÅÌÉúÍ∞íÏùÑ ÌïúÍ∏ÄÎ°ú Î≥ÄÌôòÌïòÎäî Ìï®Ïàò
        function getStatusKorean(status) {
            const statusMap = {
                'PLANNED': 'Í≥ÑÌöçÎê®',
                'IN_PROGRESS': 'ÏßÑÌñâÏ§ë',
                'COMPLETED': 'ÏôÑÎ£å',
                'HOLD': 'Î≥¥Î•ò',
                'CANCELLED': 'Ï∑®ÏÜåÎê®',
                'WAIT_QUALITY': 'ÌíàÏßàÍ≤ÄÏÇ¨ ÎåÄÍ∏∞',
                'QUALITY_PASS': 'ÌíàÏßàÍ≤ÄÏÇ¨ ÌÜµÍ≥º',
                'QUALITY_FAIL': 'ÌíàÏßàÍ≤ÄÏÇ¨ Ïã§Ìå®',
                'INVENTORY_CONFIRMED': 'Ïû¨Í≥† ÌôïÏ†ï'
            };
            return statusMap[status] || status; // Îß§ÌïëÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ ÏõêÎ≥∏ Î∞òÌôò
        }
        
        // LOT Ï∂îÏ†Å Í≤∞Í≥º ÌëúÏãú
        function displayLotTrackingResult(trackingList, lotNumber) {
            const resultDiv = document.getElementById('lotTrackingResult');
            
            if (!trackingList || trackingList.length === 0) {
                resultDiv.innerHTML = 
                    '<div class="no-result">' +
                        '<p>LOT Î≤àÌò∏ "' + lotNumber + '"Ïóê ÎåÄÌïú Ï∂îÏ†Å Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.</p>' +
                    '</div>';
                return;
            }
            
            // ÌòÑÏû¨ ÏÉÅÌÉú (Í∞ÄÏû• ÏµúÍ∑º)
            const currentStatus = trackingList[trackingList.length - 1];
            
            // Ïù¥Î†• Î™©Î°ù (ÏµúÍ∑º 5Í±¥Îßå)
            const recentHistory = trackingList.slice(-5).reverse();
            
            // Ïù¥Î†• HTML ÏÉùÏÑ±
            let historyHtml = '';
            for (let i = 0; i < recentHistory.length; i++) {
                const item = recentHistory[i];
                const koreanStatus = getStatusKorean(item.status);
                historyHtml += '<div class="history-item">';
                historyHtml += '<span class="status-badge status-' + item.status.toLowerCase() + '">' + koreanStatus + '</span>';
                historyHtml += '<span class="date">' + formatDate(item.startDate) + '</span>';
                if (item.remarks) {
                    historyHtml += '<span class="remarks">' + item.remarks + '</span>';
                }
                historyHtml += '</div>';
            }
            
            const currentKoreanStatus = getStatusKorean(currentStatus.status);
            
            resultDiv.innerHTML = 
                '<div class="lot-summary">' +
                    '<h4>' + lotNumber + '</h4>' +
                    '<div class="current-status">' +
                        'ÌòÑÏû¨ ÏÉÅÌÉú: <span class="status-' + currentStatus.status.toLowerCase() + '">' + currentKoreanStatus + '</span>' +
                    '</div>' +
                    '<div class="elapsed-time">' +
                        'ÏãúÏûëÏùº: ' + formatDate(currentStatus.startDate) +
                    '</div>' +
                '</div>' +
                '<div class="recent-history">' +
                    '<h5>ÏµúÍ∑º Ïù¥Î†• (ÏµúÍ∑º 5Í±¥)</h5>' +
                    '<div class="history-list">' +
                        historyHtml +
                    '</div>' +
                '</div>';
        }
        
        // ÎÇ†Ïßú Ìè¨Îß∑ÌåÖ Ìï®Ïàò
        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('ko-KR') + ' ' + date.toLocaleTimeString('ko-KR', {hour: '2-digit', minute: '2-digit'});
        }
        
        //6Î≤à ÏúÑÏ†Ø 
        function sendChatbotQuestion() {
    const q = document.getElementById("chatbot-question").value.trim();
    if (!q) {
        alert("ÏßàÎ¨∏ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî.");
        return;
    }

    const url = "<c:url value='/chatbot/ask' />";

    fetch(url, {
        method: "POST",
        headers: {"Content-Type": "application/json"},
        body: JSON.stringify({question: q})
    })
    .then(res => {
        if (!res.ok) throw new Error(`HTTP Error! Status: ${res.status}`);
        return res.json();
    })
    .then(data => {
        document.getElementById("chatbot-response").innerText = data.answer;
    })
    .catch(error => {
        document.getElementById("chatbot-response").innerText = `‚ùå Ïò§Î•ò Î∞úÏÉù: ${error.message}`;
        console.error('Chatbot Error:', error);
    });
}

        // ÏûëÏóÖÌòÑÌô© ÌïòÎã® ÌÖåÏù¥Î∏î ÌéòÏù¥Ïßï Í∏∞Îä•
        let currentWorkPage = 1;
        const workItemsPerPage = 4; // Ìïú ÌéòÏù¥ÏßÄÏóê ÌëúÏãúÌï† Ìï≠Î™© Ïàò

        // ÏûëÏóÖÌòÑÌô© ÌéòÏù¥Ïßï Ï¥àÍ∏∞Ìôî
        function initWorkStatusPagination() {
            const productRows = document.querySelectorAll('.product-row');
            const totalItems = productRows.length;
            const totalPages = Math.ceil(totalItems / workItemsPerPage);
            
            if (totalPages <= 1) return; // ÌéòÏù¥ÏßÄÍ∞Ä 1Í∞ú Ïù¥ÌïòÎ©¥ ÌéòÏù¥Ïßï Ïà®ÍπÄ
            
            // ÌéòÏù¥Ïßï Ïª®Ìä∏Î°§ ÏÉùÏÑ±
            createWorkPaginationControls(totalPages);
            
            // Ï≤´ ÌéòÏù¥ÏßÄ ÌëúÏãú
            showWorkPage(1);
        }

        // ÌéòÏù¥Ïßï Ïª®Ìä∏Î°§ ÏÉùÏÑ±
        function createWorkPaginationControls(totalPages) {
            const productStatusTable = document.querySelector('.product-status-table');
            
            // ÌéòÏù¥Ïßï Ïª®Ìä∏Î°§ HTML ÏÉùÏÑ±
            const paginationHTML = `
                <div class="work-pagination-controls">
                    <button class="work-pagination-btn work-prev-btn" onclick="changeWorkPage(-1)" disabled>
                        ‚óÄ Ïù¥Ï†Ñ
                    </button>
                    <span class="work-pagination-info">
                        <span id="work-current-page">1</span> / <span id="work-total-pages">${totalPages}</span>
                    </span>
                    <button class="work-pagination-btn work-next-btn" onclick="changeWorkPage(1)">
                        Îã§Ïùå ‚ñ∂
                    </button>
                </div>
            `;
            
            // ÌéòÏù¥Ïßï Ïª®Ìä∏Î°§ÏùÑ ÌÖåÏù¥Î∏î Îí§Ïóê Ï∂îÍ∞Ä
            productStatusTable.insertAdjacentHTML('afterend', paginationHTML);
        }

        // ÌéòÏù¥ÏßÄ Î≥ÄÍ≤Ω
        function changeWorkPage(direction) {
            const productRows = document.querySelectorAll('.product-row');
            const totalItems = productRows.length;
            const totalPages = Math.ceil(totalItems / workItemsPerPage);
            
            // ÌòÑÏû¨ ÌéòÏù¥ÏßÄ Í≥ÑÏÇ∞
            currentWorkPage += direction;
            
            // ÌéòÏù¥ÏßÄ Î≤îÏúÑ Ï≤¥ÌÅ¨
            if (currentWorkPage < 1) currentWorkPage = 1;
            if (currentWorkPage > totalPages) currentWorkPage = totalPages;
            
            // ÌéòÏù¥ÏßÄ ÌëúÏãú
            showWorkPage(currentWorkPage);
            
            // Î≤ÑÌäº ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
            updateWorkPaginationButtons(totalPages);
        }

        // ÌäπÏ†ï ÌéòÏù¥ÏßÄ ÌëúÏãú
        function showWorkPage(page) {
            const productRows = document.querySelectorAll('.product-row');
            
            // Î™®Îì† Ìï≠Î™© Ïà®Í∏∞Í∏∞
            productRows.forEach(row => {
                row.style.display = 'none';
            });
            
            // ÌòÑÏû¨ ÌéòÏù¥ÏßÄ Ìï≠Î™©Îì§Îßå ÌëúÏãú
            const startIndex = (page - 1) * workItemsPerPage;
            const endIndex = startIndex + workItemsPerPage;
            
            for (let i = startIndex; i < endIndex && i < productRows.length; i++) {
                productRows[i].style.display = 'flex';
            }
            
            // ÌéòÏù¥ÏßÄ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
            document.getElementById('work-current-page').textContent = page;
        }

        // ÌéòÏù¥Ïßï Î≤ÑÌäº ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        function updateWorkPaginationButtons(totalPages) {
            const prevBtn = document.querySelector('.work-prev-btn');
            const nextBtn = document.querySelector('.work-next-btn');
            
            // Ïù¥Ï†Ñ Î≤ÑÌäº ÏÉÅÌÉú
            if (currentWorkPage <= 1) {
                prevBtn.disabled = true;
                prevBtn.style.opacity = '0.5';
            } else {
                prevBtn.disabled = false;
                prevBtn.style.opacity = '1';
            }
            
            // Îã§Ïùå Î≤ÑÌäº ÏÉÅÌÉú
            if (currentWorkPage >= totalPages) {
                nextBtn.disabled = true;
                nextBtn.style.opacity = '0.5';
            } else {
                nextBtn.disabled = false;
                nextBtn.style.opacity = '1';
            }
        }
    </script>
</body>
</html>